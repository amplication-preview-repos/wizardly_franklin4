/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Query as PrismaQuery } from "@prisma/client";

export class QueryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QueryCountArgs, "select">): Promise<number> {
    return this.prisma.query.count(args);
  }

  async queries<T extends Prisma.QueryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueryFindManyArgs>
  ): Promise<PrismaQuery[]> {
    return this.prisma.query.findMany<Prisma.QueryFindManyArgs>(args);
  }
  async query<T extends Prisma.QueryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueryFindUniqueArgs>
  ): Promise<PrismaQuery | null> {
    return this.prisma.query.findUnique(args);
  }
  async createQuery<T extends Prisma.QueryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueryCreateArgs>
  ): Promise<PrismaQuery> {
    return this.prisma.query.create<T>(args);
  }
  async updateQuery<T extends Prisma.QueryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueryUpdateArgs>
  ): Promise<PrismaQuery> {
    return this.prisma.query.update<T>(args);
  }
  async deleteQuery<T extends Prisma.QueryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueryDeleteArgs>
  ): Promise<PrismaQuery> {
    return this.prisma.query.delete(args);
  }
}
